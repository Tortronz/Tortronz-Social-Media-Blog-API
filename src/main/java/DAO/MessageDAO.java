package DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import Model.Message;
import Util.ConnectionUtil;

/**
 * This is a Data Access Object that manages the interactions Java objects of
 * the class "Message" and the SQL database table "message".
 * 
 * The database table "message" has the columns:
 * message_id           int             Primary key, and unique identifers for
 *                                      messages
 * posted_by            int             Foreign key to "account" table, ID of
 *                                      account who posted message
 * message_text         varchar(255)    Text of message
 * time_posted_epoch    bigint          Time message was posted
 */
public class MessageDAO {
    /**
     * Gets all messages in chronological post order.
     * 
     * @return  Arraylist of all messages
     */
    public List<Message> getAllMessages() {
        Connection connection = ConnectionUtil.getConnection();
        List<Message> messages = new ArrayList<>();

        try {
            // Make SQL statement and execute it
            String sql = "SELECT * FROM message ORDER BY time_posted_epoch";
            PreparedStatement ps = connection.prepareStatement(sql);

            ResultSet rs = ps.executeQuery();


            // Store all retrieved messages in a list
            while(rs.next()){
                Message message = new Message(
                    rs.getInt(1),
                    rs.getInt(2),
                    rs.getString(3),
                    rs.getLong(4));
                messages.add(message);
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        return messages;
    }



    /**
     * This creates/inserts a new message into the "message" database table.
     * 
     * "message_id" should be automatically generated by the database because
     * it's auto-incremented.
     * 
     * @param message   The new message being created
     * 
     * @return  The successfully created message, or "null" if creation
     *          failed
     */
    public Message insertMessage(Message message) {
        Connection connection = ConnectionUtil.getConnection();
        try {
            // Make SQL statement and execute it
            String sql = "INSERT INTO message (posted_by, message_text, time_posted_epoch) VALUES (?, ?, ?)";
            PreparedStatement ps = connection.prepareStatement(sql);

            ps.setInt(1, message.getPosted_by());
            ps.setString(2, message.getMessage_text());
            ps.setLong(3, message.getTime_posted_epoch());

            ps.executeUpdate();


            // Get primary key generated by database and add it to message
            ResultSet pkeyResultSet = ps.getGeneratedKeys();

            if(pkeyResultSet.next()) {
                int generated_message_id = (int) pkeyResultSet.getLong(1);

                // Return successfully registered Message
                return new Message( generated_message_id,
                                    message.getPosted_by(),
                                    message.getMessage_text(),
                                    message.getTime_posted_epoch()
                );
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        return null;    // Occurs if creation failed
    }
}
